#Using CNN Image classification

import tensorflow as tf
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt
import numpy as np
(X_train, y_train), (X_test,y_test) = datasets.cifar10.load_data()
X_train.shape
y_train = y_train.flatten()
y_train[:5]
y_test = y_test.reshape(-1,)
classes = ["airplane","automobile","bird","cat","deer","dog","frog","horse","ship","truck"]
def plot_sample(X, y, index):
    plt.figure(figsize = (15,2))
    plt.imshow(X[index])
    plt.xlabel(classes[y[index]])
X_train = X_train / 255.0
X_test = X_test / 255.0
cnn = models.Sequential([
    layers.Conv2D(filters=32, kernel_size=(3, 3), activation='relu', input_shape=(32, 32, 3)),
    layers.MaxPooling2D((2, 2)),

    layers.Conv2D(filters=64, kernel_size=(3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),

    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(10, activation='softmax')
])
cnn.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])
cnn.evaluate(X_test,y_test)
cnn.fit(X_train,y_train,epochs=5)



#---------------------------------------------------------------------------------------------------------------------------------

#<----------------------------Digit Classification-------------->

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn import linear_model
%matplotlib inline
import tensorflow as tfwait
from tensorflow import keras

(x_train,y_train),(x_test,y_test)=keras.datasets.mnist.load_data()


x_train[0].shape


plt.matshow(x_train[1])
y_train[0]

x_train=x_train/255
x_test=x_test/255


x_train_flattened=x_train.reshape(len(x_train),28*28)
x_test_flattened=x_test.reshape(len(x_test),28*28)

x_train_flattened.shape

x_train_flattened[0].shape



from tensorflow import keras

model=keras.Sequential([
    keras.layers.Dense(100,input_shape=(784,),activation='relu'),
    keras.layers.Dense(50,input_shape=(784,),activation='sigmoid'),
    keras.layers.Dense(10,activation='sigmoid')

])
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])
model.fit(x_train_flattened,y_train,epochs=5)



model.evaluate(x_test_flattened,y_test)



y_predicted=model.predict(x_test_flattened)
y_predicted[0]

np.argmax(y_predicted[0])


plt.matshow(x_test[0])

y_predicted_labels=[np.argmax(i) for i in y_predicted]


cm=tf.math.confusion_matrix(labels=y_test,predictions=y_predicted_labels)
cm

import seaborn as sn
plt.figure(figsize=(7,5))
sn.heatmap(cm,annot=True,fmt='d')
plt.xlabel('Predicted')
plt.ylabel('Truth')